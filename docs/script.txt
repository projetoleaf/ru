/* Tabela para diferenciar tipo de refeição (tradicional, vegetariano, vegano) */
CREATE TABLE tipo_refeicao
(
  id SERIAL NOT NULL,
  descricao CHARACTER VARYING(50),

  PRIMARY KEY(id)
);

/* Tabela com os cursos e seus periodos,
Pode haver uma mesma descrição mas diferente período,
Esta tabela existirá em nosso banco? */
CREATE TABLE curso
(
  id SERIAL NOT NULL,
  descricao CHARACTER VARYING(100),
  periodo CHARACTER VARYING(50),

  PRIMARY KEY(id)
);

/* Tabela referente aos status que as refeições podem ter antes de serem consumidas (pago, aguardando pagamento, expirado/não pago, transferido, transferente) */
CREATE TABLE status
(
  id SERIAL NOT NULL,
  descricao CHARACTER VARYING(50),

  PRIMARY KEY(id)
);

/* Tabela referente aos itens do cardápio
Será responsável pelas datas das refeições? */
CREATE TABLE cardapio
(
  id SERIAL NOT NULL,
  data DATE NOT NULL UNIQUE,
  prato_base varchar(50) NOT NULL,
  prato_tradicional varchar(100) NOT NULL,
  prato_vegetariano varchar(100) NOT NULL,
  guarnicao varchar(100) NOT NULL,
  salada varchar(50) NOT NULL,
  sobremesa varchar(50) NOT NULL,
  suco varchar(50) NOT NULL,

  PRIMARY KEY (id)
);

/* Tabela para identificar se a reserva foi feita com o valor sem ou com subsídio */
CREATE TABLE tipo_valor
(
  id SERIAL NOT NULL,
  descricao CHARACTER VARYING(50),

  PRIMARY KEY(id)
);

/* Tabela para especificar as categorias e seus preços */
CREATE TABLE categoria
(
  id SERIAL NOT NULL,
  descricao CHARACTER VARYING(100) NOT NULL,
  valor_sem_subsidio numeric(15,2) NOT NULL,
  valor_com_subsidio numeric(15,2) NOT NULL,
  data_inicio DATE NOT NULL, 
  data_fim DATE,  /* Opcional ? */
  atual BOOLEAN NOT NULL, /* Opcional ? */

  PRIMARY KEY(id)
);

/* Tabela que informa a quantidade de refeição
Não necessita criar histórico, pois ela é usada somente como limite para reserva e não para saber quantas foram vendidas já que esse dado pode ser obtido pela tabela catraca*/
CREATE TABLE quantidade_refeicao
(
  id SERIAL NOT NULL,
  subsidiada INTEGER NOT NULL,
  custo INTEGER NOT NULL,

  PRIMARY KEY(id)
);

/* Tabela responsável para saber quando será o penultimo dia util da semana */
CREATE TABLE feriado
(
  id SERIAL NOT NULL,
  descricao CHARACTER VARYING(100),
  data DATE NOT NULL,

  PRIMARY KEY(id)
);

/* Tabela responsável por associar a reserva com um cliente e o tipo do valor da refeição (com ou sem subsídio). */
CREATE TABLE reserva
(
  id SERIAL NOT NULL,
  id_cliente INTEGER NOT NULL,
  id_tipo_valor INTEGER NOT NULL,

  PRIMARY KEY(id),
  CONSTRAINT fk_id_cliente FOREIGN KEY(id_cliente) REFERENCES cliente(id),
  CONSTRAINT fk_id_tipo_valor FOREIGN KEY(id_tipo_valor) REFERENCES tipo_valor(id)
);

/* Tabela responsável por associar a reserva (id_reserva) com seus itens que possuem data e status */
CREATE TABLE reserva_item
(
  id SERIAL NOT NULL,
  id_reserva INTEGER NOT NULL,
  id_data INTEGER NOT NULL, /* id_cardapio? */
  id_status INTEGER NOT NULL,
  
  PRIMARY KEY(id),
  CONSTRAINT fk_id_reserva FOREIGN KEY(id_reserva) REFERENCES reserva(id),
  CONSTRAINT fk_id_data FOREIGN KEY(id_data) REFERENCES cardapio(id),
  CONSTRAINT fk_id_status FOREIGN KEY(id_status) REFERENCES status(id)
);

/* Tabela temporária (será limpada todo domingo) para gravar das 7h ás 10h do primeiro dia útil todas as solicitações de reservas e associar a reserva com um cliente */
CREATE TABLE reserva_temp
(
  id SERIAL NOT NULL,
  id_usuario INTEGER NOT NULL,

  PRIMARY KEY(id),
  CONSTRAINT fk_id_cliente FOREIGN KEY(id_cliente) REFERENCES cliente(id)
);

/* Tabela temporária (será limpada todo domingo) para gravar das 7h ás 10h do primeiro dia útil todas as solicitações de reservas e associar seus itens com a data */
CREATE TABLE reserva_item_temp
(
  id SERIAL NOT NULL,
  id_reserva_temp INTEGER NOT NULL,
  id_data INTEGER NOT NULL, /* id_cardapio? /*
  
  PRIMARY KEY(id),
  CONSTRAINT fk_id_reserva_temp FOREIGN KEY(id_reserva_temp) REFERENCES reserva_temp(id),
  CONSTRAINT fk_id_data FOREIGN KEY(id_data) REFERENCES cardapio(id)
);

/* Tabela que registra as reservas consumidas, cliente passou pela catraca */
CREATE TABLE catraca
(
  id SERIAL NOT NULL,
  id_reserva_item INTEGER NOT NULL,

  PRIMARY KEY(id),
  CONSTRAINT fk_id_reserva_item FOREIGN KEY(id_reserva_item) REFERENCES reserva_item(id)
);

/* Tabela com os dados dos usuarios
Quais dados terão no nosso banco e quais não visto que serão puxados do banco da central de acesso da unesp ?
Como será o primeiro login ? -> Precisa saber o tipo de refeição que ele quer consumir.
Como saber se o cara já tem cadastro no nosso banco - login ?
Não  haverá histórico de créditos.
Pode mudar o curso ? */
CREATE TABLE cliente
(
  id SERIAL NOT NULL,
  login CHARACTER VARYING(50) NOT NULL,
  cpf CHARACTER VARYING(14) NOT NULL, /* Terá ? */
  email CHARACTER VARYING(100) NOT NULL, /* Terá ? */
  senha CHARACTER VARYING(100) NOT NULL, /* Terá ? */
  nome CHARACTER VARYING(100) NOT NULL, /* Terá ? */
  matricula INTEGER NOT NULL, /* Terá ? */
  id_curso INTEGER NOT NULL, /* Terá ? */
  data_nascimento DATE NOT NULL, /* Terá ? */
  data_criado TIMESTAMP NOT NULL,
  creditos numeric(15,2) NOT NULL,
  id_tipo_cliente INTEGER NOT NULL,
  ativo BOOLEAN NOT NULL, /* Unesp pode fornecer automático ? */

  PRIMARY KEY(id),
  CONSTRAINT fk_id_curso FOREIGN KEY(id_curso) REFERENCES curso(id), /* Terá ? */
  CONSTRAINT fk_id_tipo_cliente FOREIGN KEY(id_tipo_cliente) REFERENCES tipo_cliente(id) 
);

/* Tabela com os tipos de usuário (admin, STN - Seção Técnica de Nutrição, STF - Seção Técnica de Finanças, cliente) */
CREATE TABLE tipo_cliente
(
  id SERIAL NOT NULL,
  descricao CHARACTER VARYING(50) NOT NULL,

  PRIMARY KEY(id)
);

/* Tabela que relaciona o cliente com sua categoria e mantém em histórico através de Triggers (UPDATE) e campos para data_inicio e data_fim.
Usuário pode até pertencer a duas categorias, mas deve escolher uma.
Terá uma tela para ele escolher ? */
CREATE TABLE cliente_categoria
(
  id SERIAL NOT NULL,
  id_cliente INTEGER NOT NULL,
  id_categoria INTEGER NOT NULL,
  data_inicio TIMESTAMP NOT NULL,
  data_fim TIMESTAMP /* Pode ser NULL ->saber atual */

  PRIMARY KEY(id),
  CONSTRAINT fk_id_cliente FOREIGN KEY(id_cliente) REFERENCES cliente(id),
  CONSTRAINT fk_id_categoria FOREIGN KEY(id_categoria) REFERENCES categoria(id)
);

/* Tabela que relaciona o cliente com seu tipo de refeição e mantém em histórico através de Triggers (UPDATE) e campos para data_inicio e data_fim.
Usuário pode até pertencer a duas categorias, mas deve escolher uma.
Terá uma tela para ele escolher ? */
CREATE TABLE cliente_tipo_refeicao
(
  id SERIAL NOT NULL,
  id_cliente INTEGER NOT NULL,
  id_tipo_refeicao INTEGER NOT NULL,
  data_inicio TIMESTAMP NOT NULL,
  data_fim TIMESTAMP /* Pode ser NULL ->saber atual */

  PRIMARY KEY(id),
  CONSTRAINT fk_id_cliente FOREIGN KEY(id_cliente) REFERENCES cliente(id),
  CONSTRAINT fk_id_tipo_refeicao FOREIGN KEY(id_tipo_refeicao) REFERENCES tipo_refeicao(id)
);
